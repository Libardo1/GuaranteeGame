O5 <- nrow(subset(CPIEstimates35 , !(time_to_election %in% c(15, 14, 13, 12, 11))))
#### Plot expected values ####
# Partisan colours, initially run in ErrorPresPartyGraph.R
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
# Create plot
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") +
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25, 0.34),
labels = c(-0.5, -0.25, 0, 0.25, "N =")) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
annotate(geom = "text", x = 5, y = 0.37,
label = O5, size = 4) +
annotate(geom = "text", x = 4, y = 0.37,
label = O4, size = 4) +
annotate(geom = "text", x = 3, y = 0.37,
label = O3, size = 4) +
annotate(geom = "text", x = 2, y = 0.37,
label = O2, size = 4) +
annotate(geom = "text", x = 1, y = 0.37,
label = O1, size = 4) +
annotate(geom = "text", x = 0, y = 0.37,
label = O0, size = 4) +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
# Create plot
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(yintercept = 0, size = 1,
alpha = I(0.5)) +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") +
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25, 0.34),
labels = c(-0.5, -0.25, 0, 0.25, "N =")) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
annotate(geom = "text", x = 5, y = 0.37,
label = O5, size = 4) +
annotate(geom = "text", x = 4, y = 0.37,
label = O4, size = 4) +
annotate(geom = "text", x = 3, y = 0.37,
label = O3, size = 4) +
annotate(geom = "text", x = 2, y = 0.37,
label = O2, size = 4) +
annotate(geom = "text", x = 1, y = 0.37,
label = O1, size = 4) +
annotate(geom = "text", x = 0, y = 0.37,
label = O0, size = 4) +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
# Create range of values to simulate expected values across
election_time <- (0:10)^2
# Set fitted values
NL8SetElectionDem <- setx(NL8, pres_party = 1, elect2 = election_time)
NL8SetElectionRep <- setx(NL8, pres_party = 0, elect2 = election_time)
# Simulate expected values.
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
# Extract expected values from simulations (Democratic President)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
names(NL8SimElectionDem.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionDem.ev <- melt(NL8SimElectionDem.ev, measure = 1:11)
NL8SimElectionDem.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionDem.ev$variable))
NL8SimElectionDem.ev$Party <- "Dem"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionDem.ev <- subset(NL8SimElectionDem.ev, Lower == FALSE & Upper == FALSE)
# Extract expected values from simulations (ElectionRep)
NL8SimElectionRep.ev <- NL8SimElectionRep$qi
NL8SimElectionRep.ev <-data.frame(NL8SimElectionRep.ev$ev)
names(NL8SimElectionRep.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionRep.ev <- melt(NL8SimElectionRep.ev, measure = 1:11)
NL8SimElectionRep.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionRep.ev$variable))
NL8SimElectionRep.ev$Party <- "Rep"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionRep.ev <- subset(NL8SimElectionRep.ev, Lower == FALSE & Upper == FALSE)
# Append both sets of simulation results
NL8Bound <- rbind(NL8SimElectionDem.ev, NL8SimElectionRep.ev)
#### Create plots ####
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(yintercept = 0, size = 1,
alpha = I(0.5)) +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25),
labels = c(-0.5, -0.25, 0, 0.25)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
###############
# Main Analyses for GreenBook Forecast Error Paper
# Christopher Gandrud
# 19 November 2012
###############
## Load libraries
# library(devtools)
library(MatchIt)
library(Zelig)
# library(stats)
# To run as a stand alone file. First, run the following files from earlier in the paper:
## source_url("http://bit.ly/NXdCpk")
# Subset for complete (nonmissing) values
# matchit requires data sets to have no missing values
vars <- c("Quarter", "ElectionPeriod", "pres_party", "error.prop.deflator.q2",
"time_to_election", "recession", "senate_dem_rep",
"house_dem_rep", "DebtGDP", "ExpenditureGDP", "UNRATE",
"PotentialGDP", "GlobalModel", "FedFunds", "FedFunds2qChange", "DiscountRate",
"DiscountRate2qChange", "Chair"
)
cpi.complete <- cpi.data[complete.cases(cpi.data[vars]),]
cpi.complete <- cpi.complete[vars]
# Remove quarters when president party ID would be unknown for 2 quarter forecasting (time_to_election = 15, 14)
cpi.complete <- subset(cpi.complete, !(time_to_election %in% c(14, 15)))
cpi.data2 <- subset(cpi.data, !(time_to_election %in% c(14, 15)))
#### Matching Model ####
# Elections, No interactions
# cpi.matched.election <- matchit(ElectionPeriod ~ pres_party + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange + UNRATE, data = cpi.complete, method = "genetic", pop.size = 161)
# Party, All Interactions
# cpi.matched.party.all <- matchit(pres_party ~ recession + time_to_election + ElectionPeriod + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + UNRATE + GlobalModel + DiscountRate2qChange + pres_party*ElectionPeriod + pres_party*senate_dem_rep + pres_party*house_dem_rep + senate_dem_rep + house_dem_rep, data = cpi.complete, method = "genetic", pop.size = 161)
# Party, Only pres*ElectionPeriod Interaction
cpi.matched.party <- matchit(pres_party ~ recession + time_to_election + ElectionPeriod + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange + UNRATE + pres_party*ElectionPeriod, data = cpi.complete, method = "genetic", pop.size = 161)
#### Diagnostics for Covariate Balance ####
# summary(cpi.matched.election)
# plot(cpi.matched.election, type = "QQ")
# plot(cpi.matched.election, type = "jitter")
# summary(cpi.matched.party.all, interactions = TRUE)
# plot(cpi.matched.party.all, type = "QQ")
# plot(cpi.matched.party.all, type = "jitter")
# summary(cpi.matched.party, interactions = TRUE)
# plot(cpi.matched.party, type = "QQ", interactive = FALSE)
# plot(cpi.matched.party, type = "jitter", interactive = FALSE)
# Turn matched data into data.frame for analysis
# cpi.Mdf.election <- match.data(cpi.matched.election)
cpi.Mdf.party <- match.data(cpi.matched.party)
#### Create Time To Election Squared Variable ####
cpi.data2$elect2 <- (cpi.data2$time_to_election)^2
# cpi.Mdf.election$elect2 <- (cpi.Mdf.election$time_to_election)^2
cpi.Mdf.party$elect2 <- (cpi.Mdf.party$time_to_election)^2
################### Parametric Models ################
###### Non-matched (N) ######
# Least Squares
NL1 <- zelig(error.prop.deflator.q2 ~ recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL2 <- zelig(error.prop.deflator.q2 ~ time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL3 <- zelig(error.prop.deflator.q2 ~ ElectionPeriod + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL4 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL6 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL7 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GlobalModel + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL8 <- zelig(error.prop.deflator.q2 ~ pres_party*elect2 + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "ls", data = cpi.data2, cite = FALSE)
NL9 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + DebtGDP + time_to_election + Chair + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL10 <- zelig(error.prop.deflator.q2 ~ pres_party*house_dem_rep + recession + DebtGDP + time_to_election + senate_dem_rep + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep + house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL12 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.data2, cite = FALSE)
NL13 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.data2, cite = FALSE)
###### Matched based with the ElectionPeriod as the treatment variable (E) ######
# Least Squares
# EL1 <- zelig(error.prop.deflator.q2 ~ DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL2 <- zelig(error.prop.deflator.q2 ~ time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL3 <- zelig(error.prop.deflator.q2 ~ ElectionPeriod + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL4 <- zelig(error.prop.deflator.q2 ~ pres_party + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL6 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL7 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL8 <- zelig(error.prop.deflator.q2 ~ pres_party*elect2 + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL9 <- zelig(error.prop.deflator.q2 ~ pres_party*house_dem_rep + time_to_election + senate_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL10 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep + house_dem_rep + time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.election, cite = FALSE)
#
# EL12 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.Mdf.election, cite = FALSE)
###### Matched based with the pres_party as the treatment variable (P) ######
# Least Squares
PL1 <- zelig(error.prop.deflator.q2 ~ recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL2 <- zelig(error.prop.deflator.q2 ~ time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL3 <- zelig(error.prop.deflator.q2 ~ ElectionPeriod + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL4 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL6 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL7 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL8 <- zelig(error.prop.deflator.q2 ~ pres_party*elect2 + recession + senate_dem_rep + house_dem_rep + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL9 <- zelig(error.prop.deflator.q2 ~ pres_party*house_dem_rep + recession + DebtGDP + time_to_election + senate_dem_rep + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL10 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep + house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL11 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep + recession + DebtGDP + time_to_election + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.Mdf.party, cite = FALSE)
PL12 <- zelig(error.prop.deflator.q2 ~ pres_party*senate_dem_rep*house_dem_rep, model = "ls", data = cpi.Mdf.party, cite = FALSE)
##### Normal Bayes, Not Matched (NB) #####
NB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "normal.bayes", data = cpi.data, cite = FALSE)
#### Normal Bayes, Matched (MP) ####
PB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "normal.bayes", data = cpi.Mdf.party, cite = FALSE)
################
# President*Election Interaction Graph
# Christopher Gandrud
# Updated 22 November 2012
################
# Create range of values to simulate expected values across
election_time <- (0:10)^2
# Set fitted values
NL8SetElectionDem <- setx(NL8, pres_party = 1, elect2 = election_time)
NL8SetElectionRep <- setx(NL8, pres_party = 0, elect2 = election_time)
# Simulate expected values.
NL8SimElectionDem <- sim(NL8, x = NL8SetElectionDem)
NL8SimElectionRep <- sim(NL8, x = NL8SetElectionRep)
# Extract expected values from simulations (Democratic President)
NL8SimElectionDem.ev <- NL8SimElectionDem$qi
NL8SimElectionDem.ev <-data.frame(NL8SimElectionDem.ev$ev)
names(NL8SimElectionDem.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionDem.ev <- melt(NL8SimElectionDem.ev, measure = 1:11)
NL8SimElectionDem.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionDem.ev$variable))
NL8SimElectionDem.ev$Party <- "Dem"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionDem.ev <- ddply(NL8SimElectionDem.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionDem.ev <- subset(NL8SimElectionDem.ev, Lower == FALSE & Upper == FALSE)
# Extract expected values from simulations (ElectionRep)
NL8SimElectionRep.ev <- NL8SimElectionRep$qi
NL8SimElectionRep.ev <-data.frame(NL8SimElectionRep.ev$ev)
names(NL8SimElectionRep.ev) <- c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")
NL8SimElectionRep.ev <- melt(NL8SimElectionRep.ev, measure = 1:11)
NL8SimElectionRep.ev$variable <- as.numeric(gsub("x", "", NL8SimElectionRep.ev$variable))
NL8SimElectionRep.ev$Party <- "Rep"
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
NL8SimElectionRep.ev <- ddply(NL8SimElectionRep.ev, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8SimElectionRep.ev <- subset(NL8SimElectionRep.ev, Lower == FALSE & Upper == FALSE)
# Append both sets of simulation results
NL8Bound <- rbind(NL8SimElectionDem.ev, NL8SimElectionRep.ev)
#### Create plots ####
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(yintercept = 0, size = 1,
alpha = I(0.5)) +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25),
labels = c(-0.5, -0.25, 0, 0.25)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(yintercept = 0, size = 1,
alpha = I(0.5)) +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
scale_y_continuous(breaks = c(-0.25, 0, 0.25),
labels = c(-0.25, 0, 0.25)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(yintercept = 0, size = 1,
alpha = I(0.5)) +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
scale_y_continuous(breaks = c(-0.1, 0, 0.25),
labels = c(-0.1, 0, 0.25)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ggplot(data = NL8Bound, aes(variable, value), group) +
geom_hline(yintercept = 0, size = 1,
alpha = I(0.5)) +
stat_summary(fun.y = mean, geom = "line",
aes(group = Party), colour = "grey70") +
geom_point(aes(color = Party), alpha = I(0.01), size = 3) +
scale_x_reverse(breaks = c(10, 8, 6, 4, 2, 0)) +
scale_y_continuous(breaks = c(-0.2, 0, 0.2),
labels = c(-0.2, 0, 0.2)) +
xlab("\nQuarters to Election") +
ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = partisan.colors) +
guides(colour = guide_legend(title = NULL, override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
MUnemploy <- NL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + error.unemploy.q2, model = "ls", data = cpi.dataU, cite = FALSE)
summary(MUnemploy)
MUnemployForecast <- NL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + GB_Unemp2, model = "ls", data = cpi.dataU, cite = FALSE)
summary(MUnemployForecast
)
MUNRATE <- NL5 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE, model = "ls", data = cpi.dataU, cite = FALSE)
summary(MUNRATE)
library(RJSON)
library(rjson)
data(cars)
toJSON(cars)
?t.test
library(openintro)
data(satGPA)
subset1 <-subset(satGPA$hsGPA,satGPA$sex == "1")
subset2 <-subset(satGPA$hsGPA,satGPA$sex == "2")
t.test(subset1,subset2, conf.int = 0.99)
t.test(subset1, subset2)
library(openintro)
library(Zelig)
data(hsGPA)
library(help = "Zelig")
library(help = "openintro")
data(hsb2)
viewData(hsb2)
viewData(hsb2)
names(hsb2)
M1 <- zelig(read ~ gender + write, model = "normal", data = hsb2)
M1 <- zelig(read ~ as.factor(gender) + write, model = "normal", data = hsb2)
M1 <- zelig(read ~ as.factor(gender) + write, model = "normal", data = hsb2, cite = FALSE)
viewData(hsb2)
Values <- c("male", "female")
ZOut <- setx(M1, gender = Values)
viewData(ZOut)
ZSim <- sim(ZOut, XOut)
XOut <- setx(M1, gender = Values)
ZSim <- sim(M1, XOut)
plot(ZSim)
library(RCurl)
library(plyr)
library(xts)
library(ggplot2)
library(MASS)
library(reshape2)
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
#### Create Election Year +1 lag ####
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove (De)centralised category
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
#### Remove NA in AMC Type & Capture only an AMC's first year ####
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
#### Graphs ####
# Basic graph of AMC types
ggplot(data = FirstYearNotNa, aes(AMCType)) +
geom_bar() +
theme_bw()
# Crisis Creation Variable (1 no crisis, 2 crisis)
FirstYearNotNa$CrisisCreated <- FALSE
FirstYearNotNa$CrisisCreated[FirstYearNotNa$AMCAnyCreate == 1 &
FirstYearNotNa$SystemicCrisisLag3 == 1] <- TRUE
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ CrisisCreated) +
geom_bar() +
theme_bw()
# Election the previous year
# Facited by ElectionYear & Crisis Created
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(.~ ElectionYear1) +
geom_bar() +
theme_bw()
# Facited by ElectionYear & Crisis Created
ggplot(data = FirstYearNotNa, aes(AMCType)) +
facet_grid(ElectionYear ~ CrisisCreated) +
geom_bar() +
theme_bw()
# govfrac density
ggplot(data = FirstYearNotNa, aes(govfrac)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
# UDS density
ggplot(data = FirstYearNotNa, aes(UDS)) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
ggplot(data = FirstYearNotNa, aes(log(GDPperCapita))) +
geom_density(aes(line = AMCType, color = AMCType)) +
theme_bw()
TypeColors <- c("#E6AB02", "#1B9E77")
# Number operating by type
SumOp <- ddply(NotNaAMCType, .(year, AMCType), function(x) sum(x$NumAMCOpNoNA))
SumOp <- subset(SumOp, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
?lm
0.75/2
0.075/2
installed.packages("tabplotd3")
install.packages("tabplotd3")
100/100000
install.packages("formatR")
data(possum)
library(openintro)
data(possum)
rstudio::viewData(possum)
Male1 <- subset(possum, sex == "m" & site == 1)
rstudio::viewData(possum)
rstudio::viewData(possum)
?subset
summary(possum$sex)
summary(possum$site)
rstudio::viewData(Male1)
library(MASS)
?table
table(possum$sex, possum$site)
Table1 <- table(possum$sex, possum$site)
Table1
###############
# Create Guarantee Signalling Game Simulation Plots
# Christopher Gandrud
# 8 December 2012
# Depends on Python 2.7.2
###############
# Change working directory
setwd("/git_repositories/GuaranteeGame/")
# Load Packages
library(ggplot2)
library(gridExtra)
# Run game and simulate data
system('python GuaranteeGame2Signals.py')
# Import simulated data
Sims <- read.csv("SimulatedData/SimData.csv")
# Create signaller combinations
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.05] <- "-0.05, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.15] <- "-0.05, 0.15"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.05] <- "-0.15, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.15] <- "-0.15, 0.15"
#### Graph Utilities ####
# Save plot
pdf('~/Dropbox/Ireland_Korea_Research/Paper/Figures/TwoSignalers.pdf', height = 11)
# Guarantee Decision (gk)
GuarPlot <- ggplot(Sims, aes(x = omega, y = Guarantee)) +
facet_grid(~Signalers) +
geom_point(color = "#E41A1C") +
scale_x_continuous(breaks = c(0.0, 0.5, 1), labels = c(0, 0.5, 1)) +
xlab("") + ylab("Guarantee Decision \n") +
theme_bw(base_size = 15)
# PM's Utility
PMPlot <-ggplot(Sims, aes(x = omega, y = Upm)) +
facet_grid(~Signalers) +
geom_point(color = "#4DAF4A") +
scale_x_continuous(breaks = c(0.0, 0.5, 1), labels = c(0, 0.5, 1)) +
xlab("") + ylab("Prime Minister's Utility \n") +
theme_bw(base_size = 15)
# S1's Utility
S1Plot <- ggplot(Sims, aes(x = omega, y = Us1)) +
facet_grid(~Signalers) +
geom_point(color = "#1F78B4") +
scale_x_continuous(breaks = c(0.0, 0.5, 1), labels = c(0, 0.5, 1)) +
xlab("") + ylab("MoF's Utility \n") +
theme_bw(base_size = 15)
# S2's Utility
S2Plot <- ggplot(Sims, aes(x = omega, y = Us2)) +
facet_grid(~Signalers) +
geom_point(color = "#A6CEE3") +
scale_x_continuous(breaks = c(0.0, 0.5, 1), labels = c(0, 0.5, 1)) +
xlab("\n omega") + ylab("FR's Utility \n") +
theme_bw(base_size = 15)
# Combine the Graphs
grid.arrange(GuarPlot, PMPlot, S1Plot, S2Plot, nrow = 4)
dev.off()
?cor.test
