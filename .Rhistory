install.packages(c("car", "ggplot2", "knitr"))
install.packages("zoo")
library(slidify)
library(repmis)
?LoadandCite
CranPkgs <- c("plyr", "ecp", "gridExtra", "ggplot2", "reshape2", "whisker")
?install.package
?install.packages
CranPkgs <- c("plyr", "ecp", "gridExtra", "ggplot2", "reshape2", "whisker")
lapply(CranPkgs, install.packages)
library(slidify)
library(slidify)
library(slidify)
library(slidify)
library(d3Network)
library(d3Network)
install.packages(d3Network)
install.packages("d3Network")
2.25-1.5
0.5+.75
2.5+.75
## Load data
URLMain <- "https://raw.github.com/christophergandrud/LegislativeViolence/master/Data/LegViolenceMain.csv"
leg.raw <- repmis::source_GitHubData(URLMain)
## Keep variables of interest
vars <- c("country", "year", "violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "higherTrust", "CWsurvSelfExpr", "legislature", "elect_legislature", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity")
leg.raw <- leg.raw[vars]
## Label MajCat factor categories
leg.raw$MajCat <- factor(leg.raw$MajCat, labels = c("Minority", "Regular Maj.", "Strong Maj."))
## Transform GDP/capita to thousands of USD
leg.raw$GDPperCapita <- leg.raw$GDPperCapita/1000
## Create disproportionality threshold variable where 1 < 5
leg.raw$HighProp[leg.raw$disproportionality < 5] <- 1
leg.raw$HighProp[leg.raw$disproportionality >= 5] <- 0
## Transform majority variable from a proportion to a percentage
leg.raw$maj = leg.raw$maj*100
## Only Countries with Legislatures
leg <- subset(leg.raw, legislature == 1)
## Only Countries with Elected Legislatures
dem <- subset(leg.raw, elect_legislature == 1)
## Only Countries with Elected Legislatures after 1989 (new sample 199)
dNew <- subset(dem, year > 1989)
## Analyses
## Run the main analyses used for predicting quantities of interest and estimating regression coefficients.
# Load package
library(devtools)
library(digest)
# Run analysis
source_url("https://raw.github.com/christophergandrud/LegislativeViolence/master/Analysis/leg.main.analyses2.R")
source("/git_repositories/LegislativeViolence/Analysis/expectedValueGraphs2.R")
library(ggplot2)
source("/git_repositories/LegislativeViolence/Analysis/expectedValueGraphs2.R")
?seq
## Load data
URLMain <- "https://raw.github.com/christophergandrud/LegislativeViolence/master/Data/LegViolenceMain.csv"
leg.raw <- repmis::source_GitHubData(URLMain)
## Keep variables of interest
vars <- c("country", "year", "violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "higherTrust", "CWsurvSelfExpr", "legislature", "elect_legislature", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity")
leg.raw <- leg.raw[vars]
## Label MajCat factor categories
leg.raw$MajCat <- factor(leg.raw$MajCat, labels = c("Minority", "Regular Maj.", "Strong Maj."))
## Transform GDP/capita to thousands of USD
leg.raw$GDPperCapita <- leg.raw$GDPperCapita/1000
## Create disproportionality threshold variable where 1 < 5
leg.raw$HighProp[leg.raw$disproportionality < 5] <- 1
leg.raw$HighProp[leg.raw$disproportionality >= 5] <- 0
## Transform majority variable from a proportion to a percentage
leg.raw$maj = leg.raw$maj*100
## Only Countries with Legislatures
leg <- subset(leg.raw, legislature == 1)
## Only Countries with Elected Legislatures
dem <- subset(leg.raw, elect_legislature == 1)
## Only Countries with Elected Legislatures after 1989 (new sample 199)
dNew <- subset(dem, year > 1989)
## Analyses
## Run the main analyses used for predicting quantities of interest and estimating regression coefficients.
# Load package
library(devtools)
library(digest)
# Run analysis
source_url("https://raw.github.com/christophergandrud/LegislativeViolence/master/Analysis/leg.main.analyses2.R")
equire(ggplot2)
require(ggplot2)
require(reshape2)
library(gridExtra)
library(plyr)
## Ranges of fitted values
HighProp.r <- c(0, 1)
dem.r <- seq(from = 0, to = 85, by = 2)
maj.r <- seq(from = 20, to = 100, by = 2)
D15.DemAge <-setx(D15, DemAge = dem.r)
# Simulate quantities of interest
D15.DemSim <- sim(D15, x = D15.DemAge)
# Extract expected values from simulations
D15.demAge.e <- data.frame(simulation.matrix(D15.DemSim, "Expected Values: E(Y|X)"))
View(`D15.demAge.e`)
D15.demAge.e <- melt(D15.demAge.e, measure = 1:43)
# Remove "X" from variable
D15.demAge.e$variable <- as.numeric(gsub("X", "", D15.demAge.e$variable))
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
D15.demAge.ePer <- ddply(D15.demAge.e, .(variable), transform,
Lower = value < quantile(value, c(0.025)))
D15.demAge.ePer <- ddply(D15.demAge.ePer, .(variable), transform,
Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
D15.demAge.ePer <- subset(D15.demAge.ePer, Lower == FALSE & Upper == FALSE)
# Plot
D15.demAge.p <- ggplot(D15.demAge.ePer, aes(variable, value)) +
geom_point(shape = 21, color = "gray30", alpha = I(0.05)) +
stat_smooth() +
scale_x_continuous(breaks = c(0, 21, 51, 85),
labels = c("0", "20", "50", "85")) +
scale_y_continuous(breaks = c(0, 0.02, 0.05, 0.08),
limits = c(0, 0.08)) +
xlab("\nAge of Democracy") + ylab("") +
theme_bw(base_size = 12)
## Disporportionality < 5 Dummy
## Set fitted values
D15.HighProp <- setx(D15, HighProp = HighProp.r)
# Simulate quantities of interest
D15.HighPropSim <- sim(D15, x = D15.HighProp)
# Extract expected values from simulations
D15.HighProp.e <- data.frame(simulation.matrix(D15.HighPropSim, "Expected Values: E(Y|X)"))
D15.HighProp.e <- melt(D15.HighProp.e, measure = 1:2)
# Remove "X" from variable
D15.HighProp.e$variable <- as.numeric(gsub("X", "", D15.HighProp.e$variable))
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
D15.HighProp.ePer <- ddply(D15.HighProp.e, .(variable), transform,
Lower = value < quantile(value, c(0.025)))
D15.HighProp.ePer <- ddply(D15.HighProp.ePer, .(variable), transform,
Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
D15.HighProp.ePer <- subset(D15.HighProp.ePer, Lower == FALSE & Upper == FALSE)
# Plot
D15.HighProp.p <- ggplot(D15.HighProp.ePer, aes(variable, value)) +
geom_point(shape = 21, color = "gray30", alpha = I(0.05)) +
stat_smooth(method = "lm", se = FALSE) +
scale_x_reverse(breaks = c(1, 2), labels = c("Higher", "Very Low")) +
scale_y_continuous(breaks = c(0, 0.02, 0.05, 0.08),
labels = c("", "", "", ""), limits = c(0, 0.08)) +
xlab("\nDisproportionality") + ylab("") +
theme_bw(base_size = 12)
## Majority
# Set fitted values
D15.maj1 <-setx(D15, maj = maj.r)
# Simulate quantities of interest
D15.majSim <- sim(D15, x = D15.maj1)
# Extract expected values from simulations
D15.maj.e <- data.frame(simulation.matrix(D15.majSim, "Expected Values: E(Y|X)"))
D15.maj.e <- melt(D15.maj.e, measure = 1:41)
# Remove "X" from variable
D15.maj.e$variable <- as.numeric(gsub("X", "", D15.maj.e$variable))
# Put in terms of the original variable percentage
D15.maj.e$variable = D15.maj.e$variable + 19
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
D15.maj.ePer <- ddply(D15.maj.e, .(variable), transform,
Lower = value < quantile(value, c(0.025)))
D15.maj.ePer <- ddply(D15.maj.ePer, .(variable), transform,
Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
D15.maj.ePer <- subset(D15.maj.ePer, Lower == FALSE & Upper == FALSE)
# Plot
D15.maj.p <- ggplot(D15.maj.ePer, aes(variable, value)) +
geom_point(shape = 21, color = "gray30", alpha = I(0.05)) +
stat_smooth(method = "lm", se = FALSE) +
scale_y_continuous(breaks = c(0, 0.02, 0.05, 0.08),
labels = c("", "", "", ""),
limits = c(0, 0.08)) +
xlab("\nGovernment Majority") + ylab("") +
theme_bw()
#### Combibine plots
predicted.combine <- grid.arrange(D15.demAge.p, D15.HighProp.p, D15.maj.p, ncol = 3, left = "Predicted Probability of Violence in a Year")
library(texreg)
texreg(list(D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16))
# Create Graphs
source("/git_repositories/LegislativeViolence/Analysis/expectedValueGraphs2.R")
## Load data
URLMain <- "https://raw.github.com/christophergandrud/LegislativeViolence/master/Data/LegViolenceMain.csv"
leg.raw <- repmis::source_GitHubData(URLMain)
## Keep variables of interest
vars <- c("country", "year", "violence", "system", "DemAge", "maj", "MajCat", "govfrac", "singleParty", "pr", "tenshort", "UDS", "polity2", "ethnicAlesina", "CWtrust", "higherTrust", "CWsurvSelfExpr", "legislature", "elect_legislature", "disproportionality", "gini", "GDPperCapita", "enps", "enpv", "federal", "immunity")
leg.raw <- leg.raw[vars]
## Label MajCat factor categories
leg.raw$MajCat <- factor(leg.raw$MajCat, labels = c("Minority", "Regular Maj.", "Strong Maj."))
## Transform GDP/capita to thousands of USD
leg.raw$GDPperCapita <- leg.raw$GDPperCapita/1000
## Create disproportionality threshold variable where 1 < 5
leg.raw$HighProp[leg.raw$disproportionality < 5] <- 1
leg.raw$HighProp[leg.raw$disproportionality >= 5] <- 0
## Transform majority variable from a proportion to a percentage
leg.raw$maj = leg.raw$maj*100
## Only Countries with Legislatures
leg <- subset(leg.raw, legislature == 1)
## Only Countries with Elected Legislatures
dem <- subset(leg.raw, elect_legislature == 1)
## Only Countries with Elected Legislatures after 1989 (new sample 199)
dNew <- subset(dem, year > 1989)
## Analyses
## Run the main analyses used for predicting quantities of interest and estimating regression coefficients.
# Load package
library(devtools)
library(digest)
# Run analysis
source_url("https://raw.github.com/christophergandrud/LegislativeViolence/master/Analysis/leg.main.analyses2.R")
library(texreg)
texreg(list(D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16))
extract.Relogit
install.packages(c("changepoint", "formatR", "labeling", "markdown", "Rcpp", "xts"))
install.packages(c("formatR", "markdown"), lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(relogit)
library(texreg)
extract.Relogit(D1)
extract.Relogit(DN1)
extract.Relogit
names(D1)
textreg(D1)
texreg(D1)
class(D1)
texreg
extract.Relogit(DN1)
extract.Relogit
extract.Relogit(DN1, include.nobs = FALSE)
texreg(list(D1))
?texreg
texreg(D1)
nobs
nobs(D1)
names(D2)
summary(D1)
extractor <- function (model, include.aic = TRUE, include.bic = TRUE, include.loglik = TRUE,
include.deviance = TRUE, include.nobs = TRUE, ...)
{
s <- summary(model, ...)
coefficient.names <- rownames(s$coef)
coefficients <- s$coef[, 1]
standard.errors <- s$coef[, 2]
significance <- s$coef[, 4]
aic <- AIC(model)
bic <- BIC(model)
lik <- logLik(model)[1]
dev <- deviance(model)
#n <- nobs(model)
gof <- numeric()
gof.names <- character()
gof.decimal <- logical()
if (include.aic == TRUE) {
gof <- c(gof, aic)
gof.names <- c(gof.names, "AIC")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.bic == TRUE) {
gof <- c(gof, bic)
gof.names <- c(gof.names, "BIC")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.loglik == TRUE) {
gof <- c(gof, lik)
gof.names <- c(gof.names, "Log Likelihood")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.deviance == TRUE) {
gof <- c(gof, dev)
gof.names <- c(gof.names, "Deviance")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.nobs == TRUE) {
gof <- c(gof, n)
gof.names <- c(gof.names, "Num. obs.")
gof.decimal <- c(gof.decimal, FALSE)
}
tr <- createTexreg(coef.names = coefficient.names, coef = coefficients,
se = standard.errors, pvalues = significance, gof.names = gof.names,
gof = gof, gof.decimal = gof.decimal)
return(tr)
}
extractor(D1, include.nobs = FALSE)
model <- D1
coefficient.names <- rownames(s$coef)
s <- summary(model, ...)
s <- summary(model
)
coefficient.names <- rownames(s$coef)
coefficients <- s$coef[, 1]
standard.errors <- s$coef[, 2]
significance <- s$coef[, 4]
aic <- AIC(model)
bic <- BIC(model)
lik <- logLik(model)[1]
dev <- deviance(model)
n <- nobs(model)
gof <- numeric()
gof <- numeric()
gof.names <- character()
gof.decimal <- logical()
if (include.aic == TRUE) {
gof <- c(gof, aic)
gof.names <- c(gof.names, "AIC")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.bic == TRUE) {
gof <- c(gof, aic)
gof.names <- c(gof.names, "AIC")
gof.decimal <- c(gof.decimal, TRUE)
gof <- c(gof, bic)
gof.names <- c(gof.names, "BIC")
gof.decimal <- c(gof.decimal, TRUE)
gof <- c(gof, lik)
gof.names <- c(gof.names, "Log Likelihood")
gof.decimal <- c(gof.decimal, TRUE)
gof <- c(gof, dev)
gof.names <- c(gof.names, "Deviance")
gof.decimal <- c(gof.decimal, TRUE)
tr <- createTexreg(coef.names = coefficient.names, coef = coefficients,
se = standard.errors, pvalues = significance, gof.names = gof.names,
gof = gof, gof.decimal = gof.decimal)
return(tr)
}
tr
tr <- createTexreg(coef.names = coefficient.names, coef = coefficients,
se = standard.errors, pvalues = significance, gof.names = gof.names,
gof = gof, gof.decimal = gof.decimal)
return(tr)
library(d3Network)
d3ForceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", zoom = TRUE,
Group = "group", file = "~/Desktop/ForceTest2.html", opacity = 0.8)
MisJson <- RCurl::getURL("https://raw.github.com/christophergandrud/d3Network/Mustache/JSONdata/miserables.json")
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
# Create graph
d3ForceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", zoom = TRUE,
Group = "group", file = "~/Desktop/ForceTest2.html", opacity = 0.8)
;
\:
Test <- "\;"
Test <- ";"
Test
(0.6+0.9)/2
setwd("/git_repositories/GuaranteeGame/")
# Load Packages
library(ggplot2)
library(gridExtra)
# Import simulated data
Sims <- read.csv("SimulatedData/SimData09.csv")
# Create signaller combinations
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.05] <- "-0.05, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.15] <- "-0.05, 0.15"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.05] <- "-0.15, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.15] <- "-0.15, 0.15"
#### Graph Utilities ####
# Save plot
pdf('~/Dropbox/Ireland_Korea_Research/Paper/Figures/TwoSignalers.pdf', height = 11)
# Guarantee Decision (gk)
GuarPlot <- ggplot(Sims, aes(x = omega, y = Guarantee)) +
facet_grid(~Signalers) +
geom_point(color = "#E41A1C") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Guarantee Decision \n") +
theme_bw(base_size = 15)
# PM's Utility
PMPlot <-ggplot(Sims, aes(x = omega, y = Upm)) +
facet_grid(~Signalers) +
geom_point(color = "#4DAF4A") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Prime Minister's Utility \n") +
theme_bw(base_size = 15)
# S1's Utility
S1Plot <- ggplot(Sims, aes(x = omega, y = Us1)) +
facet_grid(~Signalers) +
geom_point(color = "#1F78B4") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("MoF's Utility \n") +
theme_bw(base_size = 15)
# S2's Utility
S2Plot <- ggplot(Sims, aes(x = omega, y = Us2)) +
facet_grid(~Signalers) +
geom_point(color = "#A6CEE3") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("\n omega i") + ylab("FR's Utility \n") +
theme_bw(base_size = 15)
# Combine the Graphs
grid.arrange(GuarPlot, PMPlot, S1Plot, S2Plot, nrow = 4)
dev.off()
# Import simulated data
Sims <- read.csv("SimulatedData/SimData09.csv")
# Create signaller combinations
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.05] <- "-0.05, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.15] <- "-0.05, 0.15"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.05] <- "-0.15, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.15] <- "-0.15, 0.15"
#### Graph Utilities ####
# Save plot
pdf('~/Dropbox/Ireland_Korea_Research/Paper/Figures/TwoSignalers.pdf', height = 11)
# Guarantee Decision (gk)
GuarPlot <- ggplot(Sims, aes(x = omega, y = Guarantee)) +
facet_grid(~Signalers) +
geom_point(color = "#E41A1C") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Guarantee Decision \n") +
theme_bw(base_size = 15)
# PM's Utility
PMPlot <-ggplot(Sims, aes(x = omega, y = Upm)) +
facet_grid(~Signalers) +
geom_point(color = "#4DAF4A") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Prime Minister's Utility \n") +
theme_bw(base_size = 15, panel.margin = unit(2, "lines"))
# S1's Utility
S1Plot <- ggplot(Sims, aes(x = omega, y = Us1)) +
facet_grid(~Signalers) +
geom_point(color = "#1F78B4") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("MoF's Utility \n") +
theme_bw(base_size = 15)
# S2's Utility
S2Plot <- ggplot(Sims, aes(x = omega, y = Us2)) +
facet_grid(~Signalers) +
geom_point(color = "#A6CEE3") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("\n omega i") + ylab("FR's Utility \n") +
theme_bw(base_size = 15)
# Combine the Graphs
grid.arrange(GuarPlot, PMPlot, S1Plot, S2Plot, nrow = 4)
dev.off()
# Import simulated data
# Import simulated data
Sims <- read.csv("SimulatedData/SimData09.csv")
# Create signaller combinations
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.05] <- "-0.05, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.15] <- "-0.05, 0.15"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.05] <- "-0.15, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.15] <- "-0.15, 0.15"
#### Graph Utilities ####
# Save plot
pdf('~/Dropbox/Ireland_Korea_Research/Paper/Figures/TwoSignalers.pdf', height = 11)
# Guarantee Decision (gk)
GuarPlot <- ggplot(Sims, aes(x = omega, y = Guarantee)) +
facet_grid(~Signalers) +
geom_point(color = "#E41A1C") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Guarantee Decision \n") +
theme_bw(base_size = 15)
# PM's Utility
PMPlot <-ggplot(Sims, aes(x = omega, y = Upm)) +
facet_grid(~Signalers) +
geom_point(color = "#4DAF4A") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Prime Minister's Utility \n") +
theme_bw(base_size = 15)
# S1's Utility
S1Plot <- ggplot(Sims, aes(x = omega, y = Us1)) +
facet_grid(~Signalers) +
geom_point(color = "#1F78B4") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("MoF's Utility \n") +
theme_bw(base_size = 15)
# S2's Utility
S2Plot <- ggplot(Sims, aes(x = omega, y = Us2)) +
facet_grid(~Signalers) +
geom_point(color = "#A6CEE3") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("\n omega i") + ylab("FR's Utility \n") +
theme_bw(base_size = 15)
# Combine the Graphs
grid.arrange(GuarPlot, PMPlot, S1Plot, S2Plot, nrow = 4)
dev.off()
-(0.05-0)^2
# Import simulated data
Sims <- read.csv("SimulatedData/SimData09.csv")
# Create signaller combinations
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.05] <- "-0.05, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.15] <- "-0.05, 0.15"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.05] <- "-0.15, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.15] <- "-0.15, 0.15"
#### Graph Utilities ####
# Save plot
pdf('~/Dropbox/Ireland_Korea_Research/Paper/Figures/TwoSignalers.pdf', height = 11)
# Guarantee Decision (gk)
GuarPlot <- ggplot(Sims, aes(x = omega, y = Guarantee)) +
facet_grid(~Signalers) +
geom_point(color = "#E41A1C") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Guarantee Decision \n") +
theme_bw(base_size = 15)
# PM's Utility
PMPlot <-ggplot(Sims, aes(x = omega, y = Upm)) +
facet_grid(~Signalers) +
geom_point(color = "#4DAF4A") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("Prime Minister's Utility \n") +
theme_bw(base_size = 15)
# S1's Utility
S1Plot <- ggplot(Sims, aes(x = omega, y = Us1)) +
facet_grid(~Signalers) +
geom_point(color = "#1F78B4") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("") + ylab("MoF's Utility \n") +
theme_bw(base_size = 15)
# S2's Utility
S2Plot <- ggplot(Sims, aes(x = omega, y = Us2)) +
facet_grid(~Signalers) +
geom_point(color = "#A6CEE3") +
scale_x_continuous(breaks = c(0.6, 0.75, 0.9), labels = c(0.6, 0.75, 0.9)) +
xlab("\n omega i") + ylab("FR's Utility \n") +
theme_bw(base_size = 15)
# Combine the Graphs
grid.arrange(GuarPlot, PMPlot, S1Plot, S2Plot, nrow = 4)
dev.off()
