sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
row_vector alpha[J,T];               // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
frt_data <- list(
J = NCountry,
T = NYear,
K = NItems,
N = nrow(MoltenReady),
jj = MoltenReady$countrynum,
tt = MoltenReady$yearnum,
kk = MoltenReady$variable,
y = MoltenReady$value
)
# Run model
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
row_vector[2] alpha[J,T];      // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
##############
# FRT Index Stan Test (version 0.2): Adding time
# Christopher Gandrud
# 10 July 2014
# MIT License
##############
# Load packages
library(WDI)
library(DataCombine)
library(reshape2)
library(dplyr)
library(rstan)
# --------------------------------------------------- #
#### Create Indicator Data Set ####
# Download GFDD data from the World Bank
Indicators <- c('GFDD.DI.01', 'GFDD.DI.03', 'GFDD.DI.04',
'GFDD.DI.05', 'GFDD.DI.06', 'GFDD.DI.07', 'GFDD.DI.08',
'GFDD.DI.11', 'GFDD.DI.13', 'GFDD.DI.14',
'GFDD.EI.02', 'GFDD.EI.08', 'GFDD.OI.02', 'GFDD.OI.07',
'GFDD.SI.02', 'GFDD.SI.03', 'GFDD.SI.04', 'GFDD.SI.05',
'GFDD.SI.07')
# Download indicators
# Unable to download 'GFDD.DM.011', 'GFDD.OI.14'
Base <- WDI(indicator = Indicators, start = 1998, end = 2011, extra = TRUE)
# Keep countries with 'High income' (OECD and non-OECD classification)
BaseSub <- grepl.sub(data = Base, Var = 'income', pattern = 'High income')
Droppers <- c("iso3c", "region",  "capital", "longitude", "latitude",
"income", "lending")
BaseSub <- BaseSub[, !(names(BaseSub) %in% Droppers)]
#### Create missingness indicators ####
KeeperLength <- length(Indicators)
IndSub <- Indicators[1:KeeperLength]
VarVec <- vector()
for (i in IndSub){
BaseSub[, paste0('Rep_', i)] <- 1
BaseSub[, paste0('Rep_', i)][is.na(BaseSub[, i])] <- 0
temp <- paste0('Rep_', i)
VarVec <- append(VarVec, temp)
}
#### Data description ####
# Create country/year numbers
BaseSub$countrynum <- as.numeric(as.factor(BaseSub$iso2c))
BaseSub$yearnum <- as.numeric(as.factor(BaseSub$year))
#### Clean up ####
# Keep only complete variables
BaseStanVars <- BaseSub[, c('countrynum', 'yearnum', VarVec)]
# Data descriptions
NCountry <- max(BaseStanVars$countrynum)
NYear <- max(BaseStanVars$yearnum)
NItems <- length(VarVec)
# Melt data so that it is easy to enter into Stan data list
MoltenBase <- melt(BaseStanVars, id.vars = c('countrynum', 'yearnum'))
# Convert item names to numeric
MoltenBase$variable <- as.numeric(as.factor(MoltenBase$variable))
# Order data
MoltenReady <- arrange(MoltenBase, countrynum, yearnum, variable)
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
row_vector[2] alpha;      // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
frt_data <- list(
J = NCountry,
T = NYear,
K = NItems,
N = nrow(MoltenReady),
jj = MoltenReady$countrynum,
tt = MoltenReady$yearnum,
kk = MoltenReady$variable,
y = MoltenReady$value
)
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
vector[2] alpha;      // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
vector[2] alpha[J,T];      // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
real alpha[J,T];      // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
real alpha[J];      // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
frt_code <- '
data {
int<lower=1> J;                // number of countries
int<lower=1> T;                // number of years
int<lower=1> K;                // number of items
int<lower=1> N;                // number of obvservations
int<lower=1> jj[N];            // country for observation n
int<lower=1> tt[N];            // time for observation n
int<lower=1,upper=K> kk[N];    // question for observation n
int<lower=0,upper=1> y[N];     // correctness for observation n
}
parameters {
real delta;                    // mean transparency
real alpha;               // transparency for j,t - mean
real beta[K];                  // difficulty of item k
real log_gamma[K];             // discrimination of k
real<lower=0> sigma_alpha;     // scale of abilities
real<lower=0> sigma_beta;      // scale of difficulties
real<lower=0> sigma_gamma;     // scale of log discrimiation
}
model {
alpha ~ normal(0,sigma_alpha);
beta ~ normal(0,sigma_beta);
log_gamma ~ normal(0,sigma_gamma);
delta ~ cauchy(0,5);
sigma_alpha ~ cauchy(0,5);
sigma_beta ~ cauchy(0,5);
sigma_gamma ~ cauchy(0,5);
for (n in 1:N)
y[n] ~ bernoulli_logit( exp(log_gamma[kk[n]])
* (alpha[jj[n],tt[n]] - beta[kk[n]] + delta) );
}
'
# Create data for Stan
frt_data <- list(
J = NCountry,
T = NYear,
K = NItems,
N = nrow(MoltenReady),
jj = MoltenReady$countrynum,
tt = MoltenReady$yearnum,
kk = MoltenReady$variable,
y = MoltenReady$value
)
# Run model
fit1 <- stan(model_code = frt_code, data = frt_data,
iter = 100, chains = 4)
setwd("/git_repositories/GuaranteeGame/")
# Load Packages
library(ggplot2)
library(gridExtra)
Sims <- read.csv("SimulatedData/SimData09_2014.csv")
# Create signaller combinations
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.05] <- "-0.05, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.15] <- "-0.05, 0.15"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.05] <- "-0.15, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.15] <- "-0.15, 0.15"
View(Sims)
GuarOmega <- ggplot(Sims, aes(omega, y = Xreal)) +
facet_grid(~Signalers) +
theme_bw(base_size = 10)
GuarOmega
ggplot(Sims, aes(y = omega, y = Xreal)) +
facet_grid(~Signalers) +
geom_point() +
theme_bw(base_size = 10)
ggplot(Sims, aes(x = omega, y = Xreal)) +
facet_grid(~Signalers) +
geom_point() +
theme_bw(base_size = 10)
summary(Sims)
Sims <- read.csv("SimulatedData/SimData09_2014.csv",
stringsAsFactors = FALSE)
summary(Sims)
?read.table
vars <- names(Sims)
for (i in vars){
Sims[, i] <- as.numeric(Sims[, i])
}
summary(Sims)
# Create signaller combinations
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.05] <- "-0.05, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.05 & Sims$Signaler2 == 0.15] <- "-0.05, 0.15"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.05] <- "-0.15, 0.05"
Sims$Signalers[Sims$Signaler1 == -0.15 & Sims$Signaler2 == 0.15] <- "-0.15, 0.15"
View(Sims)
ggplot(Sims, aes(x = omega, y = Xreal)) +
facet_grid(~Signalers) +
geom_point() +
theme_bw(base_size = 10)
ggplot(Sims, aes(x = omega, y = Xreal)) +
facet_grid(~Signalers) +
geom_point() +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("Guarantee - omega i\n") +
theme_bw(base_size = 10)
# Guarantee - Omega
GuarOmega <- ggplot(Sims, aes(x = omega, y = Xreal)) +
facet_grid(~Signalers) +
geom_point() +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("Guarantee - omega i\n") +
theme_bw(base_size = 10)
# Guarantee Decision (gk)
GuarPlot <- ggplot(Sims, aes(x = omega, y = Guarantee)) +
facet_grid(~Signalers) +
geom_point(color = "#E41A1C") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("Guarantee Decision \n") +
theme_bw(base_size = 10)
# PM's Utility
PMPlot <-ggplot(Sims, aes(x = omega, y = Upm)) +
facet_grid(~Signalers) +
geom_point(color = "#4DAF4A") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("Prime Minister's Utility \n") +
theme_bw(base_size = 10)
# S1's Utility
S1Plot <- ggplot(Sims, aes(x = omega, y = Us1)) +
facet_grid(~Signalers) +
geom_point(color = "#1F78B4") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("MoF's Utility \n") +
theme_bw(base_size = 10)
# S2's Utility
S2Plot <- ggplot(Sims, aes(x = omega, y = Us2)) +
facet_grid(~Signalers) +
geom_point(color = "#A6CEE3") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("\n omega i") + ylab("FR's Utility \n") +
theme_bw(base_size = 10)
# Combine the Graphs
grid.arrange(GuarOmega, GuarPlot, PMPlot, S1Plot, S2Plot, nrow = 5)
pdf('~/Dropbox/Ireland_Korea_Research/Paper/Figures/TwoSignalers.pdf', height = 15)
# Guarantee - Omega
GuarOmega <- ggplot(Sims, aes(x = omega, y = Xreal)) +
facet_grid(~Signalers) +
geom_point() +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("Guarantee - omega i\n") +
theme_bw(base_size = 10)
# Guarantee Decision (gk)
GuarPlot <- ggplot(Sims, aes(x = omega, y = Guarantee)) +
facet_grid(~Signalers) +
geom_point(color = "#E41A1C") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("Guarantee Decision \n") +
theme_bw(base_size = 10)
# PM's Utility
PMPlot <-ggplot(Sims, aes(x = omega, y = Upm)) +
facet_grid(~Signalers) +
geom_point(color = "#4DAF4A") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("Prime Minister's Utility \n") +
theme_bw(base_size = 10)
# S1's Utility
S1Plot <- ggplot(Sims, aes(x = omega, y = Us1)) +
facet_grid(~Signalers) +
geom_point(color = "#1F78B4") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("") + ylab("MoF's Utility \n") +
theme_bw(base_size = 10)
# S2's Utility
S2Plot <- ggplot(Sims, aes(x = omega, y = Us2)) +
facet_grid(~Signalers) +
geom_point(color = "#A6CEE3") +
scale_x_continuous(breaks = c(0.7, 0.8, 0.9),
labels = c(0.7, 0.8, 0.9)) +
xlab("\n omega i") + ylab("FR's Utility \n") +
theme_bw(base_size = 10)
# Combine the Graphs
grid.arrange(GuarOmega, GuarPlot, PMPlot, S1Plot, S2Plot, nrow = 5)
dev.off()
